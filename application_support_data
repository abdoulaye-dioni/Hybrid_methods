---
title: "application support data"
author: "Abdulaye Dioni"
date: "`r Sys.Date()`"
output: 
  html_document: 
    toc: true
    highlight: pygments
    theme: cerulean
    number_sections: true
---

```{r}
ti <- Sys.time()


library(Hmisc)
library(survival)
library(ggplot2)
library(survminer)
library(ggthemes)
library(mice)
library(mitml)
library(tableone)
library(splines)
```



## Loading the data

```{r}
getHdata(support)
getHdata(support2)
support.name <- names(support)
support.name
```

Restricted variable selection according to the recommendations at https://hbiostat.org/data/repo/supportdesc

```{r}
support2_data <- support2[, support.name] 
dim(support2_data)
```




```{r}
support2_data <- as.data.frame(lapply(support2_data, function(col) {
  if (inherits(col, "labelled")) {
    return(as.vector(col))
  } else {
    return(col)
  }
}))

```


```{r}
dim(support2_data)
names(support2_data)
```


```{r}
summary(support2_data)
```

As part of the illustration of the application of hybrid approaches, the analysis is restricted to a subset of clinically relevant variables measured at admission.


```{r}
support2_data <- support2_data[, c("d.time","death","age","sex","income","sod", "resp")]

```

```{r}
summary(support2_data)
```


## Notoyage des données
```{r}
support2_data$income <- as.character(support2_data$income)
support2_data$income[support2_data$income %in% c("$25-$50k", ">$50k")] <- ">$25k"
support2_data$income <- factor(support2_data$income,
                            levels = c("under $11k", "$11-$25k" ,   ">$25k"),
                            labels = c("<11k", "11–25k", ">25k")
)
```


```{r}
support2_data$resp <- ifelse(support2_data$resp == 0, NA, support2_data$resp)
support2_data <- support2_data[!support2_data$resp %in% c(0), ]
support2_data$death <- as.factor(support2_data$death)
support2_data$d.time <- support2_data$d.time/(30.4375*3) 
```

```{r}
support2_data$R.income <- as.factor(ifelse(is.na(support2_data$income),0,1))
```



## Données d'études 


```{r}
data_clean <- support2_data[complete.cases(support2_data[, setdiff(names(support2_data), "income")]), ]
```






## Descriptive Analysis of the Data

### Proportion of SUPPORT Data Used


```{r}
prop_use_support <- (nrow(data_clean)/nrow(support2))*100
prop_use_support
```


### Proportion of Censored and Missing Observations


```{r}
(sum(data_clean$death ==0)/nrow(data_clean))*100 #  censure

(sum(is.na(data_clean$income))/nrow(data_clean))*100 # manquante
```

```{r}
summary(data_clean)
```


### Description of the Data by `income` and `R.income` Strata


```{r}
TableOne_death <- tableone::CreateTableOne(vars = setdiff(names(data_clean), c("R.income")),strata = "death",data = data_clean,includeNA = FALSE,test = FALSE)

print(TableOne_death, showAllLevels = TRUE, quote = FALSE, noSpaces = TRUE, pDigits = 4)
```




```{r}
TableOne_R.income <- tableone::CreateTableOne(vars = setdiff(names(data_clean), c("id", "income", "R.income")),strata = "R.income",data = data_clean,includeNA = FALSE, test = FALSE)

print(TableOne_R.income, showAllLevels = TRUE, quote = FALSE, noSpaces = TRUE, pDigits = 4)
```



## Kaplan-Meier 


```{r}
km_income <- survfit (Surv(d.time , death ==1) ~income, data=data_clean, type='kaplan-meier')

km_income_graph <- survminer::ggsurvplot(
  fit = km_income, 
  data = data_clean,
  pval = TRUE, # Affiche la p-valeur du log-rank test
  risk.table = FALSE, # Pas de tableau de risque
  xlab = "Time (in quarters, 3-month periods)", 
  ylab = "Survival probability",
  ggtheme = theme_bw(base_size = 8),
  #xscale = "d_y",
  #break.x.by = 1/3,
  censor = FALSE,
  lwd = 0.7,
  legend.labs = levels(data_clean$income)
)

km_income_graph$plot <- km_income_graph$plot + 
  ggtitle("Kaplan-Meier by Income") +
  theme(plot.title = element_text(hjust = 0.5, size = 8, face = "bold"))+
  theme(legend.position = "top")


km_R.income <- survfit (Surv(d.time , death ==1) ~R.income, data=data_clean, type='kaplan-meier')

km_R.income_graph <- survminer::ggsurvplot(
  fit = km_R.income, 
  data = data_clean,
  pval = TRUE, # Affiche la p-valeur du log-rank test
  risk.table = FALSE, # Pas de tableau de risque
  xlab = "Time (in quarters, 3-month periods)", 
  ylab = "Survival probability",
  ggtheme =  theme_bw(base_size = 8),
  #xscale = "d_y",
  #break.x.by = 0.5,
  censor = FALSE,
  lwd = 0.7,
  legend.labs = c("R = 0","R = 1")
)

km_R.income_graph$plot <- km_R.income_graph$plot+ 
  ggtitle("Kaplan-Meier by missing Income indicator (R)") +
  theme(plot.title = element_text(hjust = 0.5, size = 8, face = "bold"))+
  theme(legend.position = "top")




gridExtra::grid.arrange(grobs = list( km_income_graph$plot, km_R.income_graph$plot), ncol = 2)
```


* Pour `income, P = 0.62` Aucune différence significative détectée entre les groupes. * Pour `R, P < 0.0001` Si les données étaient MCAR , la survie ne devrait pas différer selon le statut de complétude. Nous supposon MAR (Hypothèse de départ)


# Assessment of Linearity for Continuous Variables


```{r}
smoothSEcurve <- function(yy, xx) {
  xx.list <- min(xx) + ((0:100)/100)*(max(xx) - min(xx))
  yy.xx <- predict(loess(yy ~ xx), se=T,
                   newdata=data.frame(xx=xx.list))
  lines(yy.xx$fit ~ xx.list, lwd=2,pch = 19, col = "red")
  lines(yy.xx$fit -
          qt(0.975, yy.xx$df)*yy.xx$se.fit ~ xx.list, lwd=2, lty=2,col = "blue")
  lines(yy.xx$fit +
          qt(0.975, yy.xx$df)*yy.xx$se.fit ~ xx.list,lwd=2, lty=2, col = "blue")
}

```


```{r}
coxph_0 <- coxph(Surv(d.time, death==1) ~ 1, data = data_clean)
r.martingale <- residuals(coxph_0, type="martingale")
```



#### For `age`


```{r}
# Modèle linéaire simple
age_linear <- coxph(Surv(d.time, death == 1) ~ age, data = data_clean)

# Logarithme
data_clean$logage <- as.vector(log(data_clean$age))
data_clean$logage <- as.numeric(scale(data_clean$logage, center = TRUE, scale = FALSE))
age_log <- coxph(Surv(d.time, death == 1) ~ logage, data = data_clean)

# Terme quadratique
data_clean$agecarre <- data_clean$age + data_clean$age^2
fit2 <- coxph(Surv(d.time, death == 1) ~  agecarre, data = data_clean)

# Racine carrée
data_clean$agesqrt <- sqrt(data_clean$age)
age_sqrt <- coxph(Surv(d.time, death == 1) ~ agesqrt, data = data_clean)

# Inverse
data_clean$ageinv <- 1 / data_clean$age
age_inv <- coxph(Surv(d.time, death == 1) ~ ageinv, data = data_clean)

# Spline naturelle (3 degrés de liberté)
age_spline <- coxph(Surv(d.time, death == 1) ~ ns(age, df = 3), data = data_clean)

# Comparaison des AIC
AIC(age_linear, age_log, fit2, age_sqrt, age_inv, age_spline)
```











Among the various transformations considered for the variable *age* (linear, square root, inverse, spline), the logarithmic transformation yielded the lowest Akaike Information Criterion (AIC = 105052.7), while maintaining minimal complexity (1 degree of freedom). This result supports its use in subsequent analyses, especially since it aligns with the functional form employed in the simulation framework, where *age* also appeared in logarithmic form.







### For `resp`


```{r}
# Modèle linéaire simple
resp_linear <- coxph(Surv(d.time, death == 1) ~ resp, data = data_clean)

# Logarithme
resp_log <- coxph(Surv(d.time, death == 1) ~ log(resp), data = data_clean)

# Terme quadratique
data_clean$respcarre <- data_clean$resp + data_clean$resp^2
fit2 <- coxph(Surv(d.time, death == 1) ~ respcarre, data = data_clean)

# Racine carrée
data_clean$respsqrt <- sqrt(data_clean$resp)
resp_sqrt <- coxph(Surv(d.time, death == 1) ~ respsqrt, data = data_clean)

# Inverse
data_clean$respinv <- 1 / data_clean$resp
resp_inv <- coxph(Surv(d.time, death == 1) ~ respinv, data = data_clean)

# Spline naturelle (3 degrés de liberté)
resp_spline <- coxph(Surv(d.time, death == 1) ~ ns(resp, df = 3), data = data_clean)

# Comparaison des AIC
AIC(resp_linear, resp_log, fit2, resp_sqrt, resp_inv, resp_spline)
```







### For `sod`

```{r}
# Modèle linéaire simple
sod_linear <- coxph(Surv(d.time, death == 1) ~ sod, data = data_clean)

# Logarithme
sod_log <- coxph(Surv(d.time, death == 1) ~ log(sod), data = data_clean)

# Terme quadratique
data_clean$sodcarre <- data_clean$sod  + data_clean$sod^2
fit2 <- coxph(Surv(d.time, death == 1) ~  sodcarre, data = data_clean)

# Racine carrée
data_clean$sodsqrt <- sqrt(data_clean$sod)
sod_sqrt <- coxph(Surv(d.time, death == 1) ~ sodsqrt, data = data_clean)

# Inverse
data_clean$sodinv <- 1 / data_clean$sod
sod_inv <- coxph(Surv(d.time, death == 1) ~ sodinv, data = data_clean)

# Spline naturelle (3 degrés de liberté)
sod_spline <- coxph(Surv(d.time, death == 1) ~ ns(sod, df = 3), data = data_clean)

# Comparaison des AIC
AIC(sod_linear, sod_log, fit2, sod_sqrt, sod_inv, sod_spline)
```


Although the spline transformation of the variable *sodium* yields the lowest AIC (AIC = 105299.0), this improvement comes at the cost of a notable increase in model complexity (three degrees of freedom). In comparison, the linear specification, with only one degree of freedom, results in a slightly higher AIC (105314.4), representing an acceptable trade-off between simplicity and model fit.

Moreover, the simulated data structure is based on a linear effect of *sodium*, which supports retaining a linear form in the real-data analyses to ensure consistency between the simulated and empirical components of the study. This approach promotes coherent interpretation of the results while limiting the risk of overfitting.





```{r}
op <- par(mfrow=c(2,2))

plot(r.martingale ~ data_clean$age,
     col = "orange", pch = 19,cex = 0.3,  xlab = "Age", ylab = "Martingale Residuals of Null Cox Model",
     main = "Martingale residuals vs Age", cex.main = 0.8,cex.lab = 0.8)
smoothSEcurve(r.martingale, data_clean$age)

plot(r.martingale ~ data_clean$logage,
     col = "gray", pch = 19, cex = 0.3, xlab = "Age", ylab = "Martingale Residuals of Null Cox Model",
     main = "Martingale residuals vs log(Age)", cex.main = 0.8, cex.lab = 0.8)
smoothSEcurve(r.martingale, data_clean$logage)

plot(r.martingale ~ data_clean$resp,
     col = "gray", pch = 19, cex = 0.3, xlab = "Resp", ylab = "Martingale Residuals of Null Cox Model",
     main = "Martingale residuals vs resp", cex.main = 0.8, cex.lab = 0.8)
smoothSEcurve(r.martingale, data_clean$resp)

plot(r.martingale ~ data_clean$sod,
     col = "gray", pch = 19, cex = 0.3, xlab = "sod", ylab = "Martingale Residuals of Null Cox Model",
     main = "Martingale residuals vs sod", cex.main = 0.8, cex.lab = 0.8)
smoothSEcurve(r.martingale, data_clean$sod)
par(op)
```


## Proportional Hazards Assumption of the Cox Model

### Graphical assessment using `log-log` survival curves for categorical variables






```{r}
op <- par(mfrow=c(1,2))
log_log_sex <- survfit(Surv(d.time, death==1) ~ sex, data = data_clean)
plot(log_log_sex, fun = "cloglog", col = 1:2, xlab = "years", ylab = "log-log(Survival)")
title("log-log plot for sex (KM curve)")
legend("topleft", legend = levels(data_clean$sex), col = 1:2, lty = 1)


log_log_income <- survfit(Surv(d.time, death == 1) ~ income, data = data_clean)

plot(log_log_income, fun = "cloglog", 
     col = 1:length(unique(data_clean$income)), cex = 0.5,
     xlab = "Time (in quarters, 3-month periods)", ylab = "log-log(Survival)")

title("Log-log plot for income (KM curve)",)

legend("bottomright", legend = levels(data_clean$income), 
       col = 1:length(unique(data_clean$income)), lty = 1)
par(op)
```

PH semble  être vérifiée pour income



## PH assumption in Cox model using the `cox.zph` function from the survival package




```{r}

PH_data_clean <- coxph(Surv(d.time, death==1) ~  income + age + sex +sod + resp + age + logage    , data = data_clean)
```


```{r}
reszphkm <- cox.zph(PH_data_clean)
reszphkm
```



### Checking the Proportional Hazards (PH) Assumption

- **age**: marked violation of the PH assumption; including a time interaction (`tt(age)`) is recommended.  
- **sex**: significant violation; stratification by `sex` is advised.  
- **income**: PH assumption satisfied; no modification required.  
- **resp**: moderate violation; should be monitored or modeled with caution.  
- **sod**: PH assumption satisfied; no adjustment necessary.  
- **GLOBAL**: the PH assumption is globally violated; adjustments are needed for the affected variables.


### Selected Forms for Continuous Covariates

- `age`: logarithmic transformation  
- `sod`: linear form  
- `resp`: linear form






```{r}
op <- par(mfrow = c(2, 3))  # oma = marges extérieures (haut = 3 lignes)

plot(reszphkm, col = "blue", cex = 0.4, lwd = 2)

mtext("Schoenfeld Residuals – PH Assumption Check", outer = TRUE, cex = 1, col = "darkblue")

par(op)

```


```{r}
data_clean <- data_clean[,c("d.time","death","age","logage","sex", "income", "sod", "resp", "R.income")]
```

```{r}
summary(data_clean)
```



# Classical Methods

## Complete Case Analysis (MCAR)




```{r}
mod.mcar <- coxph(
formula = Surv(d.time, death == 1) ~ income + resp + sod + tt(logage) + strata(sex),tt = function(x, t, ...) {x * t}, data = na.omit(data_clean))
```



```{r}
extract_full_mcar_iwp <- function(cox_model) {
  # Vérification
  if (!inherits(cox_model, "coxph")) {
    stop("L'objet fourni n'est pas un modèle de type 'coxph'.")
  }
  
  # Extraire le résumé du modèle
  mod.sum <- summary(cox_model)
  
  # Vérifie si des erreurs robustes sont présentes
  colnames_coef <- colnames(mod.sum$coefficients)
  se_col <- if ("robust se" %in% colnames_coef) "robust se" else "se(coef)"
  
  # Extraire coefficients et SE appropriés
  coef_est <- mod.sum$coefficients[, "coef"]
  se_est   <- mod.sum$coefficients[, se_col]
  
  # Calculs
  lower_ci <- coef_est - qnorm(0.975) * se_est
  upper_ci <- coef_est + qnorm(0.975) * se_est
  p_value  <- 2 * (1 - pnorm(abs(coef_est / se_est)))
  ci_width <- 2 * qnorm(0.975) * se_est
  
  # Construction du tableau
  result <- data.frame(
    "exp(coef)" = exp(coef_est),
    "lower.95"  = exp(lower_ci),
    "upper.95"  = exp(upper_ci),
    "Pr(>|z|)"  = p_value,
    "CI_width"  = ci_width,
    check.names = FALSE
  )
  
  return(result)
}
```




```{r}
result.cc <- extract_full_mcar_iwp(mod.mcar)
knitr::kable(round(result.cc,3))
```







## Semi-parametric approach: Inverse Probability Weighting (MAR)

### Compromise parameter values used in the simulation study


```{r}
#kappa = 0.3 
#kappa = 0.4
kappa = 0.5
```


```{r}
set.seed(312)
work.model <- glm(R.income ~  death + age +   sod , data = data_clean, family = binomial)
predicted <-  pmax(pmin(predict(work.model, type = "response"), 0.99), 0.01)
```


# Inverse probability weights for missing observations under our proposed approach


```{r}
data_clean$w_corrected <- ifelse(
  data_clean$R.income == 1,
  1 / predicted, 
  kappa*1 + (1-kappa)*(1 / (1-predicted)))
```





```{r}
mod.iwp <- coxph(formula = Surv(d.time, death == 1) ~ income + resp + sod + tt(logage) + strata(sex),tt = function(x, t, ...) {x * t}, data = na.omit(data_clean),  weights = w_corrected,robust = TRUE)
```



```{r}
result.iwp <- extract_full_mcar_iwp(mod.iwp)
knitr::kable(round(result.iwp,3))
```







## Parametric Imputation (MAR)






```{r}
data_clean$cumhaz <- NA
fit <-  survfit(survival::Surv(d.time, death == 1) ~ 1, data = data_clean, type = "fh")
time_indices <- match(data_clean$d.time, fit$time)
data_clean$cumhaz[!is.na(time_indices)] <- fit$cumhaz[time_indices[!is.na(time_indices)]]

```


# Number of Imputations


```{r}
M = 10
```
 

```{r}
mice_P_data <- mice(
  data= data_clean[,c("cumhaz", "death", "logage","sex","income","sod","resp")],  
  m = M,         
  maxit = 5,      
  method = c("norm","logreg","norm", "logreg", "polyreg", "norm", "norm"),
  print = FALSE,
  seed = 10000
)
```






```{r}
mice_P_data <-  lapply(1:M, function(m) {
  cbind(d.time =data_clean$d.time, mice::complete(mice_P_data, m))
})
mice_P_data <- mitml::as.mitml.list(mice_P_data)
```





```{r}
miceP.model <- with(mice_P_data, coxph(Surv(d.time, death ==1) ~ income + resp + sod + tt(logage) + strata(sex),tt = function(x, t, ...) {x * t}))

```


## Function to Combine Results Using Rubin's Rules



```{r}
combine_MI <- function(manyresult) {
  # Vérification
  if (!all(sapply(manyresult, inherits, what = "coxph"))) {
    stop("Tous les éléments de 'manyresult' doivent être des objets 'coxph'.")
  }
  
  estimates <- list()
  variances <- list()
  
  for (i in seq_along(manyresult)) {
    mod.sum <- summary(manyresult[[i]])
    
    # Détecter si les erreurs sont robustes
    se_col <- if ("robust se" %in% colnames(mod.sum$coefficients)) {
      "robust se"
    } else {
      "se(coef)"
    }
    
    estimates[[i]] <- mod.sum$coefficients[, "coef"]
    variances[[i]] <- mod.sum$coefficients[, se_col]^2
  }
  
  estimates_mat <- do.call(rbind, estimates)
  variances_mat <- do.call(rbind, variances)
  
  m <- length(manyresult)
  
  Q_bar <- colMeans(estimates_mat)
  U_bar <- colMeans(variances_mat)
  B <- apply(estimates_mat, 2, var) * (m / (m - 1))
  T <- U_bar + (1 + 1 / m) * B
  se <- sqrt(T)
  
  # Degrés de liberté (formule classique de Rubin, 1987)
  df <- (m - 1) * (T / B)^2
  
  # Intervalles de confiance
  CI_low <- Q_bar - qt(0.975, df) * se
  CI_up <- Q_bar + qt(0.975, df) * se
  
  # p-value (z-test approx)
  z <- Q_bar / se
  p_value <- 2 * (1 - pnorm(abs(z)))
  
  result <- data.frame(
    "exp(coef)" = exp(Q_bar),
    "lower.95" = exp(CI_low),
    "upper.95" = exp(CI_up),
    "Pr(>|z|)" = p_value,
    check.names = FALSE,
    row.names = rownames(estimates_mat)
  )
  return(result)
}
```




```{r}
result_miceP.est <- combine_MI(miceP.model)
result_miceP.est[,"CI_width"] <- result_miceP.est[,"upper.95"] - result_miceP.est[,"lower.95"]
rownames(result_miceP.est) <- rownames(result.cc)
knitr::kable(round(result_miceP.est,3))
```











## Non-Parametric Multiple Imputation (MAR)





```{r}
rf_NP_data <- mice(
  data= data_clean[,c("cumhaz", "death", "logage","sex","income","sod","resp")],  
  m = M,         
  maxit = 5,      
  method = c("rf", "rf", "rf", "rf", "rf", "rf","rf"),
  print = FALSE,
  seed = 10000
)
```



```{r}
rf_NP_data <-  lapply(1:M, function(m) {
  cbind(d.time =data_clean$d.time, mice::complete(rf_NP_data, m))
})
rf_NP_data <- mitml::as.mitml.list(rf_NP_data)
```





```{r}
rfNP.model <-  with(rf_NP_data, coxph(Surv(d.time, death ==1) ~ income + resp + sod + tt(logage) + strata(sex),tt = function(x, t, ...) {x * t}))

```





```{r}
result_rfNP.est <- combine_MI(rfNP.model)
result_rfNP.est[,"CI_width"] <- result_rfNP.est[,"upper.95"] - result_rfNP.est[,"lower.95"]
rownames(result_rfNP.est) <- rownames(result.cc)
knitr::kable(round(result_rfNP.est,3))
```







# Hybrid Methods

## Hybrid 1: Parametric and Non-Parametric Multiple Imputation (MAR)


```{r}
P_NP_data <- vector("list", M)
for (i in 1:(M/2)) {
  P_NP_data[[i]] <- mice_P_data[[i]]
  P_NP_data[[i + (M/2)]] <- rf_NP_data[[i]]
}
P_NP_data <- mitml::as.mitml.list(P_NP_data)
```





```{r}
P_NP_mod <- with(P_NP_data, coxph(Surv(d.time, death ==1) ~ income + resp + sod + tt(logage) + strata(sex),tt = function(x, t, ...) {x * t}))
```




```{r}
result_P_NP.est <- combine_MI(P_NP_mod)
result_P_NP.est[,"CI_width"] <- result_P_NP.est[,"upper.95"] - result_P_NP.est[,"lower.95"]
rownames(result_P_NP.est) <- rownames(result.cc)
knitr::kable(round(result_P_NP.est,3))
```






## Hybrid 2: Parametric MI and IPW (MAR)



```{r}

MI.P_IWP_data <-  lapply(1:M, function(m) {
  cbind(mice_P_data[[m]], data_clean[, c( "R.income", "w_corrected")])
})

MI.P_IWP_data <- mitml::as.mitml.list(MI.P_IWP_data)
```





```{r}
MI.P_IWP_mod <- with(MI.P_IWP_data, coxph(Surv(d.time, death ==1) ~ income + resp + sod + tt(logage) + strata(sex),tt = function(x, t, ...) {x * t},weights = w_corrected, robust = TRUE))
```

```{r}
result_P_iwp.est <- combine_MI(MI.P_IWP_mod)
result_P_iwp.est[,"CI_width"] <- result_P_iwp.est[,"upper.95"] - result_P_iwp.est[,"lower.95"]
rownames(result_P_iwp.est) <- rownames(result.cc)
knitr::kable(round(result_P_iwp.est,3))
```







## Hybride 3:  MI non-parametric et IWP (MAR)



```{r}
MI.NP_IWP_data <-  lapply(1:M, function(m) {
  cbind(rf_NP_data[[m]], data_clean[, c("R.income", "w_corrected")])
})

MI.NP_IWP_data <- mitml::as.mitml.list(MI.NP_IWP_data)
```





```{r}
MI.NP_IWP_mod <-  with(MI.NP_IWP_data, coxph(Surv(d.time, death ==1) ~ income + resp + sod + tt(logage) + strata(sex),tt = function(x, t, ...) {x * t},
                                             weights = w_corrected, robust = TRUE))
```



```{r}
result_NP_iwp.est <- combine_MI(MI.NP_IWP_mod)
result_NP_iwp.est[,"CI_width"] <- result_NP_iwp.est[,"upper.95"] - result_NP_iwp.est[,"lower.95"]
rownames(result_NP_iwp.est) <- rownames(result.cc)
knitr::kable(round(result_NP_iwp.est,3))
```








## Hybrid 4: Parametric MI, Nonparametric MI, and IPW (MAR)




```{r}
P_NP_IWP_data <- lapply(1:M, function(m){
  cbind(P_NP_data[[m]],data_clean[, c("R.income", "w_corrected")])
})
P_NP_IWP_data <- mitml::as.mitml.list(P_NP_IWP_data)
```




```{r}
P_NP_IWP_mod <- with(P_NP_IWP_data, coxph(Surv(d.time, death ==1) ~ income + resp + sod + tt(logage) + strata(sex),tt = function(x, t, ...) {x * t},
                                      weights = w_corrected, robust = TRUE))
```



```{r}
result_P_NP_iwp.est <- combine_MI(P_NP_IWP_mod)
result_P_NP_iwp.est[,"CI_width"] <- result_P_NP_iwp.est[,"upper.95"] - result_P_NP_iwp.est[,"lower.95"]
rownames(result_P_NP_iwp.est) <- rownames(result.cc)
knitr::kable(round(result_P_NP_iwp.est,3))
```



```{r}
all_estimate <- data.frame(
                           CC = result.cc[,"exp(coef)"],
                           Iwp = result.iwp[,"exp(coef)"],
                           Mice.P = result_miceP.est[,"exp(coef)"],
                           RF.NP = result_rfNP.est[,"exp(coef)"],
                           Hybrid1 = result_P_NP.est[,"exp(coef)"],
                           Hybrid2 = result_P_iwp.est[,"exp(coef)"],
                           Hybrid3 = result_NP_iwp.est[,"exp(coef)"],
                           Hybrid4 = result_P_NP_iwp.est[,"exp(coef)"])
rownames(all_estimate) <- rownames(result.cc)

knitr::kable(round(all_estimate, 4))
```


```{r}
all_lower.95 <- data.frame(
  CC = result.cc[,"lower.95"],
  Iwp = result.iwp[,"lower.95"],
  Mice.P = result_miceP.est[,"lower.95"],
  RF.NP = result_rfNP.est[,"lower.95"],
  Hybrid1 = result_P_NP.est[,"lower.95"],
  Hybrid2 = result_P_iwp.est[,"lower.95"],
  Hybrid3 = result_NP_iwp.est[,"lower.95"],
  Hybrid4 = result_P_NP_iwp.est[,"lower.95"])
rownames(all_lower.95) <- rownames(result.cc)

knitr::kable(round(all_lower.95, 4))
```



```{r}
all_upper.95 <- data.frame(
  CC = result.cc[,"upper.95"],
  Iwp = result.iwp[,"upper.95"],
  Mice.P = result_miceP.est[,"upper.95"],
  RF.NP = result_rfNP.est[,"upper.95"],
  Hybrid1 = result_P_NP.est[,"upper.95"],
  Hybrid2 = result_P_iwp.est[,"upper.95"],
  Hybrid3 = result_NP_iwp.est[,"upper.95"],
  Hybrid4 = result_P_NP_iwp.est[,"upper.95"])
rownames(all_upper.95) <- rownames(result.cc)

knitr::kable(round(all_upper.95, 4))
```


```{r}
tf <- Sys.time()
code_time <- tf - ti
code_time

# sink()
```
